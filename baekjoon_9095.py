t = int(input())
res = []
for _ in range(t):
    DP = [1, 2, 4]
    n = int(input())
    if n < 4:
        res.append(DP[n-1])
    else:
        for _ in range(n-3):
            DP.append(DP[-1]+DP[-2]+DP[-3])
        res.append(DP[-1])
for x in res:
    print(x)
# 1 + 3 과 3 +1 은 다른 방법으로 간주
# 3 이 입력으로 들어오면, (1 + 1 + 1) (1 + 2) (2 + 1) (3) => 4가 나오는게 맞고
# 6 이 입력으로 들어오면...
# 각 튜플 요소 사이에 다른 튜플 요소를 넣을 수 있는 경우를 세는 건 너무 어려운 접근방법
# 발상의 전환 필요
# 정답률이 61퍼라는건 쉬운편에 속하는 문제라는거니까 내가 너무 어렵게 생각하는 듯.

# 사이사이에 들어온다고 생각하지말고, 3씩 나눠서 곱하는 방식으로 하면 되나.
# 3 을 표현할 수 있는 방법은 총 4가지.
# 4 를 표현할 수 있는 방법은 총 7가지...

# 2를 표현하는 방법은 두 가지 뿐 (1 + 1) (2)
# 5를 표현할땐 3과 2로 나누고 곱한다고 생각하면 8가지가 나와야하는데 그럴리가 없음
# 다른 변수를 생각해야 함

# DP 로 풀고 점화식 찾으면 끝난다는데 ...
# 1, 2, 3 까지는 1 2 4 가지로 초기화 해놓고 이걸 가지고 규칙성찾고 점화식.
# 그러니까 방법의 수의 모습이 어떻게 생겼는지까지는 생각하지 말았어야 함...

# 점화식 찾았삼... 단순하게 접근하니 바로 풀렸음